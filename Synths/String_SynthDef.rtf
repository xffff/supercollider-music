{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf360
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red0\green115\blue0;\red191\green0\blue0;
}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs18 \cf0 \
(\
\cf2 SynthDef\cf0 (\cf3 \\stringDWG\cf0 ,\{ \
	\cf2 arg\cf0  in_bus, out_bus=0, \
	inCoupl_bus1=12, outCoupl_bus1=10, inCoupl_bus2=13, outCoupl_bus2=11,\
	freq = 80,pDive=0,pDiveFreq=3,\
	pick= 0.7,\
	inHarm = 0.5, lpf=0.5, longt, feedb1=0.961,feedb2 =0.987, \
	modeCpl=0.16,\
	ampFBHz=102.45,fBDev = 30,fBthresh=0.1,fBLag=0.1, ampPre=0, ampFB=0, ampPost=0, distMix=0,ampPickup,\
	inVol=0, vol = 0, couplVol1=0, couplVol2=0;\
	\
	\cf2 var\cf0  input, inCoupl=0, del1, del2, out, \
	blocksize, allp, lowp, stringLoop,\
	dev = 0.2, stringh, stringv,\
	ampDelay, distort, outAmp,loopStart, eval, out2, out3, \
	xminusy,xplusy, pick_pickup, mo, resonator, thresh;\
	\cf2 var\cf0  size = 4; \cf4 // number of pickup points\cf0 \
	\
	\cf2 var\cf0  amplitude;\
	\
	\cf2 RandID\cf0 .ir(1);\
	\cf2 RandSeed\cf0 .ir(rrand(2,12345));\
				\
	freq = freq*(1-(pDive*(0.05*\cf2 EnvGen\cf0 .ar(\cf2 Env\cf0 ([0,1,0],[2,1.5],\cf3 \\sine\cf0 ),\cf2 Dust\cf0 .ar(pDiveFreq)))));\
	\
	\cf4 //definition of dsp blocks\cf0 \
	allp = \{ \cf2 |in,a|\cf0  \cf2 FOS\cf0 .ar(in,a,1,a.neg)  \}; \
	lowp = \{ \cf2 |in,a|\cf0  \cf2 FOS\cf0 .ar(in,1+a.neg,0, a) \}; \
	stringLoop = \{ \cf2 |in,delayTime, lp, ap|\cf0  \
		in = allp.(allp.(in,ap),ap);\
		in = lowp.(in,lp);\
		\cf2 DelayC\cf0 .ar(in,0.1,delayTime)\
	\};\
		\
	distort = \{ \cf2 |in|\cf0  if(in<1.neg, 2.neg/3, if(in>1, 2/3, in-(in**3/3))) \}; \
	resonator = \{ \cf2 |in,freq|\cf0   20.collect(\{ \cf2 |i|\cf0  \cf2 Resonz\cf0 .ar(in, freq*(i+1), 0.01) \}).sum \};\
	\
	pick_pickup = \{ \cf2 |in,pick,pickup, delayTime|\cf0 \
		\cf2 var\cf0  xminusy, xplusy;\
		xminusy = (pick+pickup.neg).abs/2;\
		xplusy = (pickup+pick)/2;\
		(\cf2 DelayL\cf0 .ar(in,1,(1+xminusy.neg)*delayTime)+\
		\cf2 DelayL\cf0 .ar(in,1,(1+xplusy.neg) *delayTime)+\
		\cf2 DelayL\cf0 .ar(in,1,xplusy*delayTime)+\
		\cf2 DelayL\cf0 .ar(in,1,xminusy*delayTime));\
	\};			\
		\
	\cf4 //set delay\cf0 \
	\cf4 //must subtract blockSize for correct tuning\cf0 \
	blocksize = \cf2 ControlRate\cf0 .ir.reciprocal;\
	del1 = freq.reciprocal-blocksize;\
	del2 = (freq+dev).reciprocal-blocksize;\
			\
	loopStart = \cf2 LocalIn\cf0 .ar(3);\
	\
	amplitude = (\cf2 Amplitude\cf0 .kr(loopStart[2]));\
	thresh = amplitude >= fBthresh;\
\
	ampFBHz = ampFBHz +\cf2 Lag\cf0 .ar(fBDev*\cf2 Latch\cf0 .ar(\cf2 WhiteNoise\cf0 .kr,\cf2 HPZ1\cf0 .kr(thresh)),fBLag);\
	ampDelay = ampFBHz.reciprocal - blocksize;\
	input = \cf2 LeakDC\cf0 .ar(loopStart[2],0.955) + (\cf2 InFeedback\cf0 .ar(in_bus,1)*inVol);\
	\
	\cf4 //string horizontal mode\cf0 \
	stringh = (loopStart[0] * feedb1);\
	\cf4 //string vertical mode\cf0 \
	stringv = ((loopStart[1])* feedb2) + (modeCpl*stringh);\
	\
	stringh = stringh + (input*0.5);\
	stringv = stringv + (input*0.5); \
	\
	inCoupl = \cf2 InFeedback\cf0 .ar(inCoupl_bus1,1)+\cf2 InFeedback\cf0 .ar(inCoupl_bus2,1);\
\
	stringv = stringv + inCoupl;\
	\
	stringh = stringLoop.(stringh,del1,lpf,inHarm);\
	stringv = stringLoop.(stringv,del2,lpf,inHarm);\
	\
	\cf4 //sum modes\cf0 \
	mo = 0.5 + (modeCpl/4);\
	\
	out = ((stringh + (longt*stringh*resonator.(stringh,16*freq)))*mo*1.3)+\
		((stringv + (longt*stringv*resonator.(stringv,16*freq)))\
		*(1-mo)*0.5);\
							\
	\cf4 //distortion/feedback simulation with it's own pickup\cf0 \
	outAmp = pick_pickup.(out,pick,ampPickup,del1)*ampPre;\
	outAmp = distort.(outAmp);\
	outAmp = \cf2 DelayL\cf0 .ar(outAmp,0.1,ampDelay);\
	outAmp = outAmp*ampFB;\
	\cf2 LocalOut\cf0 .ar([stringh,stringv,outAmp]); \
	out = (out*(1-distMix))+(outAmp*ampPost*distMix);\
\
	\cf4 //end of feedback loop\cf0 \
\
	\cf2 OffsetOut\cf0 .ar(outCoupl_bus1, stringh*couplVol1);\
	\cf4 //output at the other end of the string\cf0 \
	\cf4 //   outCoupl1 |------------------| outCoupl2\cf0 \
	\cf2 OffsetOut\cf0 .ar(outCoupl_bus2, \cf2 DelayL\cf0 .ar(stringh,0.1,del1/2)*couplVol2);\
	\
	\
	\cf4 // pick-pickup section\cf0 \
	\cf4 // the Manifold defines the geometry of the string\cf0 \
	\cf4 // for each pickup point a pick-pickup section is generated\cf0 \
\
	out = 0.1 * out;\
\
	out= size.collect \{ \cf2 |i|\cf0  \
		\cf2 var\cf0  pickup = (i+1)/(size+1);\
		\cf2 var\cf0  out_temp = pick_pickup.(\cf2 LeakDC\cf0 .ar(out)*vol,pick,pickup,del1);\
		\cf2 Pan2\cf0 .ar(out_temp,i.linlin(0,size,-1.0,1.0))\
	\};\
		\
	\cf2 OffsetOut\cf0 .ar(out_bus,out.sum);\
		\
\}).add	\
)\
\
(\
~argBusses = [\cf3 \\in_bus\cf0 ,\cf3 \\inCoupl_bus1\cf0 , \cf3 \\outCoupl_bus1\cf0 , \cf3 \\inCoupl_bus2\cf0 , \cf3 \\outCoupl_bus2\cf0 ];\
~busses = ~argBusses.collect\{ \cf2 Bus\cf0 .audio(s,1) \};\
x = \cf2 Synth\cf0 (\cf3 \\stringDWG\cf0 ,[~argBusses,~busses].lace);\
y = \cf2 SynthDef\cf0 (\cf3 \\excite\cf0 ,\{ \cf2 Out\cf0 .ar(~busses[0].index,\cf2 BrownNoise\cf0 .ar*0.3) \}).play\
)\
\
\
x.autogui;\
\
x.set(\cf3 \\vol\cf0 ,0.8);\
x.set(\cf3 \\inVol\cf0 ,0.4);\
~busses.do(\cf2 _\cf0 .free);\
}